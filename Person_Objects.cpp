//
//  Person_Objects.cpp
//  School_Database
//
//  Created by Branden Applewhite on 10/6/22.
//

#include <stdio.h>
#include "Person_Objects.h"

// Instantiate Static ID Counters
int Person::employeenextID = 1000;
int Person::studentnextID = 0;
int Person::developernextID = 2000;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Person
Person::~Person()
{
    
}

// Employee
Employee::~Employee()
{
    
}

// Student
Student::~Student()
{
    
}

// Developer
Developer::~Developer()
{
    
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Default Constructors ///////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Person
Person::Person(const string& n)
{
    name = n;
}

// Employee
Employee::Employee(const string& n)
{
    name = n;
    password = "Emp";
    employeeID = employeenextID++;
    classSchedule = new map<int,string> [capacity];
}

// Developer
Developer::Developer(const string& n)
{
    name = n;
    password = "Dev";
    developerID = developernextID++;
}

// Student
Student::Student(const string& n)
{
    name = n;
    password = "Stu";
    studentID = studentnextID++;
    classSchedule = new map<int,string> [capacity];
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy Constructors //////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Person
Person::Person(const Person& source)
{
    name = source.name;
    password = source.password;
}

// Employee
Employee::Employee(const Employee& source)
{
    name = source.name;
    password = source.password;
    employeeID = source.employeeID;
    
    classSchedule = new map<int,string> [capacity];
    
    copy(source.classSchedule,source.classSchedule+used,classSchedule);
    
}

// Student
Student::Student(const Student& source)
{
    name = source.name;
    password = source.password;
    studentID = source.studentID;
    
    classSchedule = new map<int,string> [capacity];
    
    copy(source.classSchedule,source.classSchedule+used,classSchedule);
}

// Developer
Developer::Developer(const Developer& source)
{
    name = source.name;
    password = source.password;
    developerID = source.developerID;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Move Constructors //////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Person
Person::Person(Person&& source) noexcept
{
    name = source.name;
    password = source.password;
}

// Employee
Employee::Employee(Employee&& source) noexcept
{
    name = source.name;
    password = source.password;
    employeeID = source.employeeID;
    
    capacity = source.capacity;
    classSchedule = source.classSchedule;
    
    source.capacity = 0;
    source.classSchedule = nullptr;
    
}

// Student
Student::Student(Student&& source) noexcept
{
    name = source.name;
    password = source.password;
    studentID = source.studentID;
    
    capacity = source.capacity;
    classSchedule = source.classSchedule;
    
    source.capacity = 0;
    source.classSchedule = nullptr;
    
}

// Developer
Developer::Developer(Developer&& source) noexcept
{
    name = source.name;
    password = source.password;
    developerID = source.developerID;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Assignment Operator (copy) /////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Person
Person&
Person::operator=(const Person& source)
{
    if(this == &source)
    {
        return *this;
    }
    
    name = source.name;
    password = source.password;
    
    return *this;
}

// Employee
Employee&
Employee::operator=(const Employee& source)
{
    if(this == &source)
    {
        return *this;
    }
    
    name = source.name;
    password = source.password;
    employeeID = source.employeeID;
    
    copy(source.classSchedule,source.classSchedule + used,classSchedule);
    return *this;
}

// Student
Student&
Student::operator=(const Student& source)
{
    if(this == &source)
    {
        return *this;
    }
    
    name = source.name;
    password = source.password;
    studentID = source.studentID;
    
    copy(source.classSchedule,source.classSchedule + used,classSchedule);
    return *this;
}

// Developer
Developer&
Developer::operator=(const Developer& source)
{
    if(this == &source)
    {
        return *this;
    }
    
    name = source.name;
    password = source.password;
    developerID = source.developerID;
    
    return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Assignment Operator (move) /////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Person
Person&
Person::operator=(Person&& source)
{
    if(this != &source)
    {
        return *this;
    }
    
    name = source.name;
    password = source.password;
    return *this;
}

// Employee
Employee&
Employee::operator=(Employee&& source)
{
    if(this != &source)
    {
        delete classSchedule;
        
        classSchedule = source.classSchedule;
        capacity = source.capacity;
        
        source.capacity = 0;
        source.classSchedule = nullptr;
    }
    
    name = source.name;
    password = source.password;
    employeeID = source.employeeID;
    
    return *this;
}

// Student
Student&
Student::operator=(Student&& source)
{
    
    if(this != &source)
    {
        delete classSchedule;
        
        classSchedule = source.classSchedule;
        capacity = source.capacity;
        
        source.capacity = 0;
        source.classSchedule = nullptr;
    }
    
    name = source.name;
    password = source.password;
    studentID = source.studentID;
    
    return *this;
}

// Developer
Developer&
Developer::operator=(Developer&& source)
{
    if(this == &source)
    {
        return *this;
    }
    
    name = source.name;
    password = source.password;
    developerID = source.developerID;
    
    return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Overload Functions /////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Overload Operators /////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Adding Class to Schedule ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Employee
void
Employee::addClass(const string& subject,const int& period)
{
    for(auto i : *classSchedule)
    {
        if(i.first == period)
        {
            cout << "Can't have 2 classes in the same period." << endl;
        }
        else if(i.second == subject)
        {
            cout << "Can't have the same class twice." << endl;
        }
        else
        {
            classSchedule->insert({period,subject});
            cout << "Class " << subject << " Period " << period << " Has been added." << endl;
        }
    }
}

// Student
void
Student::addClass(const string& subject,const int& period)
{
    for(auto i : *classSchedule)
    {
        if(i.first == period)
        {
            cout << "Can't have 2 classes in the same period." << endl;
        }
        else if(i.second == subject)
        {
            cout << "Can't have the same class twice." << endl;
        }
        else
        {
            classSchedule->insert({period,subject});
            cout << "Class " << subject << " Period " << period << " Has been added." << endl;
        }
    }
}

